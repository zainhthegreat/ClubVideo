
enum FileType {
  VIDEO
  PHOTOS
  TEXT
}

type File @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  Name: String!
  Type: FileType!
  category: String!
  description: String
  ownerID: String!
  Grade: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFileConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [File]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelFileTypeInput {
  eq: FileType
  ne: FileType
}

input ModelFileFilterInput {
  id: ModelIDInput
  Name: ModelStringInput
  Type: ModelFileTypeInput
  category: ModelStringInput
  description: ModelStringInput
  ownerID: ModelStringInput
  Grade: ModelIntInput
  and: [ModelFileFilterInput]
  or: [ModelFileFilterInput]
  not: ModelFileFilterInput
}

type Query {
  getFile(id: ID!): File @aws_api_key @aws_iam @aws_cognito_user_pools
  listFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String): ModelFileConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelFileConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelFileConditionInput {
  Name: ModelStringInput
  Type: ModelFileTypeInput
  category: ModelStringInput
  description: ModelStringInput
  ownerID: ModelStringInput
  Grade: ModelIntInput
  and: [ModelFileConditionInput]
  or: [ModelFileConditionInput]
  not: ModelFileConditionInput
}

input CreateFileInput {
  id: ID
  Name: String!
  Type: FileType!
  category: String!
  description: String
  ownerID: String!
  Grade: Int!
  _version: Int
}

input UpdateFileInput {
  id: ID!
  Name: String
  Type: FileType
  category: String
  description: String
  ownerID: String
  Grade: Int
  _version: Int
}

input DeleteFileInput {
  id: ID!
  _version: Int
}

type Mutation {
  createFile(input: CreateFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam @aws_cognito_user_pools
  updateFile(input: UpdateFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteFile(input: DeleteFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam @aws_cognito_user_pools
}

type Subscription {
  onCreateFile(owner: String): File @aws_subscribe(mutations: ["createFile"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateFile(owner: String): File @aws_subscribe(mutations: ["updateFile"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteFile(owner: String): File @aws_subscribe(mutations: ["deleteFile"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

